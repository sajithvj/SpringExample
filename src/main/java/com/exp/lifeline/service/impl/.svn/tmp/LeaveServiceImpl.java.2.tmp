package com.experion.lts.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.MessageSource;

import com.experion.lts.dao.LeaveDAO;
import com.experion.lts.dao.LeaveRecommendDAO;
import com.experion.lts.entity.Employee;
import com.experion.lts.entity.EmployeeLeaves;
import com.experion.lts.entity.LeaveAvailability;
import com.experion.lts.entity.LeaveTypes;
import com.experion.lts.mvc.data.ApplyLeaveForm;
import com.experion.lts.service.LeaveService;
import com.experion.lts.util.LTSUtil;

public class LeaveServiceImpl implements LeaveService{
	
	private final Log log = LogFactory.getLog(LeaveServiceImpl.class);
	private static final int COMP_OFF_CODE = 9;
	
	private LeaveDAO leaveDAO;
	private LeaveRecommendDAO leaveRecommendDAO;
	
	public LeaveRecommendDAO getLeaveRecommendDAO() {
		return leaveRecommendDAO;
	}

	public void setLeaveRecommendDAO(LeaveRecommendDAO leaveRecommendDAO) {
		this.leaveRecommendDAO = leaveRecommendDAO;
	}

	private MessageSource messageSource;
	
	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public LeaveDAO getLeaveDAO() {
		return leaveDAO;
	}

	public void setLeaveDAO(LeaveDAO leaveDAO) {
		this.leaveDAO = leaveDAO;
	}

	public List<EmployeeLeaves> getAppliedLeaves(int empCode) {
		List<EmployeeLeaves> empDetails=leaveDAO.getAppliedLeaves(empCode);
		return empDetails;
	}
	
	public boolean processLeaveRequest(ApplyLeaveForm applyLeaveForm, int empCode) throws ParseException
	{
		Date joiningDate = leaveDAO.getJoiningDate(empCode);
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(joiningDate);
		Float availability = leaveDAO.getLeaveAvailabilty(empCode,applyLeaveForm.getLeaveType(), leaveDurationArray[0], leaveDurationArray[1]);
		//int requestedNoOfDays = leaveDAO.getRequestedNoOfDays()
		if(availability >= Float.valueOf(applyLeaveForm.getNoOfDays()))
		{
			//int leaveId = applyLeaveForm.getLeaveId();
			String fromDate = applyLeaveForm.getFromDate();
			String toDate = applyLeaveForm.getToDate();
			SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
			EmployeeLeaves employeeLeaves = new EmployeeLeaves();
			employeeLeaves.setEmpCode(empCode);
			employeeLeaves.setLeaveType(applyLeaveForm.getLeaveType());
			employeeLeaves.setNoOfDays(Float.valueOf(applyLeaveForm.getNoOfDays()));
			employeeLeaves.setFromDate(sf.parse(fromDate));
			employeeLeaves.setToDate(sf.parse(toDate));
			employeeLeaves.setReason(applyLeaveForm.getLeaveReason());
			employeeLeaves.setContactNumber(applyLeaveForm.getPhNumber());
			employeeLeaves.setRecommender(applyLeaveForm.getRecommender());
			employeeLeaves.setManager(applyLeaveForm.getManager());
			employeeLeaves.setCancelStatus(messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault()));
			employeeLeaves.setLeaveStatus(messageSource.getMessage("lts.leave.status.request", null, Locale.getDefault()));
			/*if(leaveId == 0)
			{*/
				leaveDAO.saveLeaveRequest(employeeLeaves, empCode, leaveDurationArray[0], leaveDurationArray[1]);
			/*}
			else
			{
				employeeLeaves.setLeaveId(leaveId);
				leaveDAO.updateLeaveRequest(employeeLeaves, empCode);
			}*/
			return true;
		}
		else
		{
			return false;
		}
	}
	public List<Employee> getRecommenders()
	{
		return leaveDAO.getRecommenders();
	}
	public List<Employee> getManagers()
	{
		return leaveDAO.getManagers();
	}
	public List<LeaveTypes> getLeaveTypes()
	{
		return leaveDAO.getLeaveTypes();
	}
	
	public List<LeaveAvailability> getAvailableLeaves(int empCode) throws ParseException {
		log.info("Entered getAvailableLeaves()...");
		Date joiningDate = leaveDAO.getJoiningDate(empCode);
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(joiningDate);
		List<LeaveAvailability> empDetails = leaveDAO.getAvailableLeaves(empCode, leaveDurationArray[0], leaveDurationArray[1]);
		return empDetails;
	}

	public void cancelLeave(int leaveId, int empCode) throws ParseException {
		Date joiningDate = leaveDAO.getJoiningDate(empCode);
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(joiningDate);
		String statusType = leaveRecommendDAO.getStatusType(empCode);
		String fromAddress = leaveRecommendDAO.getSenderEmail(empCode);
		String toAddressRec = leaveRecommendDAO.getRecEmail(leaveId);
		String userName = leaveRecommendDAO.getSenderName(empCode);
		String senderUserNameRec = leaveRecommendDAO.getRecName(leaveId);
		String description = "Leave has been cancelled.";
		String toAddressMgr = leaveRecommendDAO.getMgrDetails(leaveId).get(0).getEmpEmail();
		String senderUserNameMgr = leaveRecommendDAO.getMgrDetails(leaveId).get(0).getEmpName();
		String leaverequestedStatus = messageSource.getMessage("lts.leave.status.request", null, Locale.getDefault());
		if(statusType.equals(leaverequestedStatus))
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec ,senderUserNameRec, description, userName );
		}
		else
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, senderUserNameRec, description, userName);
			boolean isMailSend1 = LTSUtil.sendEmail(messageSource, fromAddress, toAddressMgr, senderUserNameMgr, description, userName);
		}
		leaveDAO.cancelLeave(leaveId, leaveDurationArray[0], leaveDurationArray[1]);
		
	}

	public List<EmployeeLeaves> getCompOffRequests(int empCode)
	{
		
		return leaveDAO.getCompOffRequests(empCode);
	}

	public void cancelCompOffRequest(int compOffId, int empCode) throws ParseException
	{
		Date joiningDate = leaveDAO.getJoiningDate(empCode);
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(joiningDate);
		String statusType = leaveRecommendDAO.getStatusType(empCode);
		String fromAddress = leaveRecommendDAO.getSenderEmail(empCode);
		String toAddressRec = leaveRecommendDAO.getRecEmail(compOffId);
		String userName = leaveRecommendDAO.getSenderName(empCode);
		String senderUserNameRec = leaveRecommendDAO.getRecName(compOffId);
		String description = "Leave has been cancelled.";
		String toAddressMgr = leaveRecommendDAO.getMgrDetails(compOffId).get(0).getEmpEmail();
		String senderUserNameMgr = leaveRecommendDAO.getMgrDetails(compOffId).get(0).getEmpName();
		String leaverequestedStatus = messageSource.getMessage("lts.compoff.status.request", null, Locale.getDefault());
		if(statusType.equals(leaverequestedStatus))
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, userName, description, senderUserNameRec);
		}
		else
		{
		boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, userName, description, senderUserNameRec);
		boolean isMailSend1 = LTSUtil.sendEmail(messageSource, fromAddress, toAddressMgr, userName, description, senderUserNameMgr);
		}
		leaveDAO.saveCompOffCancelStatus(compOffId, leaveDurationArray[0], leaveDurationArray[1]);
		
	}

	public void processCompOffRequest(ApplyLeaveForm applyLeaveForm, int empCode) throws ParseException 
	{
		String fromDate = applyLeaveForm.getFromDate();
		String toDate = applyLeaveForm.getToDate();
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		EmployeeLeaves employeeLeaves = new EmployeeLeaves();
		employeeLeaves.setEmpCode(empCode);
		employeeLeaves.setLeaveType(COMP_OFF_CODE);
		employeeLeaves.setNoOfDays(Float.valueOf(applyLeaveForm.getNoOfDays()));
		employeeLeaves.setFromDate(sf.parse(fromDate));
		employeeLeaves.setToDate(sf.parse(toDate));
		employeeLeaves.setReason(applyLeaveForm.getRemarks());
		employeeLeaves.setContactNumber(applyLeaveForm.getPhNumber());
		employeeLeaves.setRecommender(applyLeaveForm.getRecommender());
		employeeLeaves.setManager(applyLeaveForm.getManager());
		employeeLeaves.setCancelStatus(messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault()));
		employeeLeaves.setLeaveStatus(messageSource.getMessage("lts.compoff.status.request", null, Locale.getDefault()));
		//int leaveId = applyLeaveForm.getLeaveId();
		/*if(leaveId == 0)
		{*/
			leaveDAO.saveCompOffrequest(employeeLeaves);
		/*}
		else
		{
			employeeLeaves.setLeaveId(leaveId);
			leaveDAO.updateCompOffRequest(employeeLeaves);
		}*/
	}

	/*public List<EmployeeLeaves> updateLeaveRequest(int leaveId) 
	{
		List<EmployeeLeaves> leaveList = leaveDAO.getLeaveDetails(leaveId);
		return leaveList;
	}

	public List<EmployeeLeaves> updateCompOffRequest(int leaveId) 
	{
		List<EmployeeLeaves> compOffList = leaveDAO.getLeaveDetails(leaveId);
		return compOffList;
	}*/

	public List<LeaveTypes> getLeaveTypesByGender(int empCode) 
	{
		return leaveDAO.getLeaveTypesByGender(empCode);
	}

	public String getLeaveStatus(int leaveId) 
	{
		return leaveDAO.getLeaveStatus(leaveId);
	}
	
	public String getCancelStatus(int leaveId) 
	{
		return leaveDAO.getCancelStatus(leaveId);
	}

	public String[] getLeaveYears(int empCode) {
		Date joiningDate = leaveDAO.getJoiningDate(empCode);
		Calendar dateNow = Calendar.getInstance();
		Date currentDate = dateNow.getTime();
		int yearDifference = LTSUtil.getDaysBetweenDates(joiningDate, currentDate)/365;
		yearDifference = yearDifference+1;
		String[] yearArray= new String[yearDifference];
		Calendar fromDate = Calendar.getInstance();
		fromDate.setTime(joiningDate);
		fromDate.add(Calendar.DATE, -1);
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		for(int i=yearDifference-1; i>=0; i--)
		{
			fromDate.add(Calendar.DATE, 1);
			String str = sf.format(fromDate.getTime());
			fromDate.add(Calendar.YEAR, 1);
			fromDate.add(Calendar.DATE, -1);
			str +="---"+ sf.format(fromDate.getTime());
			yearArray[i] = str;
		}
		return yearArray;
	}

	public List<EmployeeLeaves> processSearchRequest(String leaveYearDuration,int empCode) throws ParseException 
	{
		String[] leaveYearArray = leaveYearDuration.split("---");
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		Date leaveYearFrom = sf.parse(leaveYearArray[0]);
		Date leaveYearTo =  sf.parse(leaveYearArray[1]);
		return leaveDAO.getSearchResults(leaveYearFrom,leaveYearTo,empCode);
		
	}
}
