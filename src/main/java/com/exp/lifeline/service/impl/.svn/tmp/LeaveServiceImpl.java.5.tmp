package com.experion.lts.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.MessageSource;

import com.experion.lts.dao.LeaveDAO;
import com.experion.lts.dao.LeaveRecommendDAO;
import com.experion.lts.entity.Employee;
import com.experion.lts.entity.EmployeeLeaves;
import com.experion.lts.entity.LeaveAvailability;
import com.experion.lts.entity.LeaveTypes;
import com.experion.lts.mvc.data.ApplyLeaveForm;
import com.experion.lts.service.LeaveService;
import com.experion.lts.util.LTSUtil;

public class LeaveServiceImpl implements LeaveService{
	
	private final Log log = LogFactory.getLog(LeaveServiceImpl.class);
	private static final int COMP_OFF_CODE = 9;
	private static final int LOP_CODE = 10;
	private static final int EARN_LEAVE_CODE = 3;
	
	private LeaveDAO leaveDAO;
	private LeaveRecommendDAO leaveRecommendDAO;
	
	public LeaveRecommendDAO getLeaveRecommendDAO() {
		return leaveRecommendDAO;
	}

	public void setLeaveRecommendDAO(LeaveRecommendDAO leaveRecommendDAO) {
		this.leaveRecommendDAO = leaveRecommendDAO;
	}

	private MessageSource messageSource;
	
	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public LeaveDAO getLeaveDAO() {
		return leaveDAO;
	}

	public void setLeaveDAO(LeaveDAO leaveDAO) {
		this.leaveDAO = leaveDAO;
	}

	public List<EmployeeLeaves> getAppliedLeaves(int empCode) {
		List<EmployeeLeaves> empDetails=leaveDAO.getAppliedLeaves(empCode);
		return empDetails;
	}
	
	public boolean processLeaveRequest(ApplyLeaveForm applyLeaveForm, Employee empDetails) throws ParseException
	{
		int flag = 0;
		float prevYearAvailability = 0;
		float currentYearAvailability = 0;
		float prevYearLeaveDays = 0;
		float currentYearLeaveDays = 0; 
		float availability = 0;
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		//Date standardDate = empDetails.getStandardDate();
		Date[] currentleaveDuration = LTSUtil.getCurrentLeaveYear(empDetails);
		Date[] prevLeaveDuration = LTSUtil.getPreviousLeaveYear(currentleaveDuration[0], empDetails);
		
		String fromDate = applyLeaveForm.getFromDate();
		String toDate = applyLeaveForm.getToDate();
		EmployeeLeaves employeeLeaves = new EmployeeLeaves();
		employeeLeaves.setEmpCode(empDetails.getEmpCode());
		employeeLeaves.setLeaveType(applyLeaveForm.getLeaveType());
		employeeLeaves.setNoOfDays(Float.valueOf(applyLeaveForm.getNoOfDays()));
		employeeLeaves.setFromDate(sf.parse(fromDate));
		employeeLeaves.setToDate(sf.parse(toDate));
		employeeLeaves.setReason(applyLeaveForm.getLeaveReason());
		employeeLeaves.setContactNumber(applyLeaveForm.getPhNumber());
		employeeLeaves.setRecommender(applyLeaveForm.getRecommender());
		employeeLeaves.setManager(applyLeaveForm.getManager());
		employeeLeaves.setCancelStatus(messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault()));
		employeeLeaves.setLeaveStatus(messageSource.getMessage("lts.leave.status.request", null, Locale.getDefault()));
		employeeLeaves.setMailStatus(messageSource.getMessage("lts.mail.status.notsent", null, Locale.getDefault()));
		if(applyLeaveForm.getLeaveType() == LOP_CODE)
		{
			leaveDAO.saveLOPRequest(employeeLeaves);
			return true;
		}
		else
		{
			if(sf.parse(applyLeaveForm.getFromDate()).before(currentleaveDuration[0]) && sf.parse(applyLeaveForm.getToDate()).before(currentleaveDuration[0]) && applyLeaveForm.getLeaveType() != EARN_LEAVE_CODE)
			{
				availability = leaveDAO.getLeaveAvailabilty(empDetails.getEmpCode(),applyLeaveForm.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				flag = 0;
			}
			else if(sf.parse(applyLeaveForm.getFromDate()).before(currentleaveDuration[0]) && ((sf.parse(applyLeaveForm.getToDate()).compareTo(currentleaveDuration[0]) == 1) ||(sf.parse(applyLeaveForm.getToDate()).compareTo(currentleaveDuration[0]) == 0)) && applyLeaveForm.getLeaveType() != EARN_LEAVE_CODE)
			{
				prevYearAvailability = leaveDAO.getLeaveAvailabilty(empDetails.getEmpCode(),applyLeaveForm.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				currentYearAvailability = leaveDAO.getLeaveAvailabilty(empDetails.getEmpCode(),applyLeaveForm.getLeaveType(), currentleaveDuration[0], currentleaveDuration[1]);
				prevYearLeaveDays = (LTSUtil.getWorkingDaysBetweenDates(sf.parse(applyLeaveForm.getFromDate()), prevLeaveDuration[1])) + 1;
				currentYearLeaveDays = Float.valueOf(applyLeaveForm.getNoOfDays()) - prevYearLeaveDays;
				flag = 1;
			}
			else
			{
				availability = leaveDAO.getLeaveAvailabilty(empDetails.getEmpCode(),applyLeaveForm.getLeaveType(), currentleaveDuration[0], currentleaveDuration[1]);
				flag = 2;
	
			}
			
			if(flag ==0 && availability >= Float.valueOf(applyLeaveForm.getNoOfDays()))
			{
				leaveDAO.saveLeaveRequest(employeeLeaves, empDetails.getEmpCode(), prevLeaveDuration[0], prevLeaveDuration[1]);
				return true;
			}
			else if(flag ==1 && prevYearAvailability >= prevYearLeaveDays && currentYearAvailability >= currentYearLeaveDays)
			{
				leaveDAO.saveRequest(employeeLeaves, empDetails.getEmpCode(), currentleaveDuration[0], currentleaveDuration[1], prevLeaveDuration[0], prevLeaveDuration[1], prevYearLeaveDays, currentYearLeaveDays);
				return true;
			}
			else if(flag == 2 && availability >= Float.valueOf(applyLeaveForm.getNoOfDays()))
			{
				leaveDAO.saveLeaveRequest(employeeLeaves, empDetails.getEmpCode(), currentleaveDuration[0], currentleaveDuration[1]);
				return true;
			}
			else
			{
				return false;
			}
		}
	}
	public List<Employee> getRecommenders(int empCode)
	{
		return leaveDAO.getRecommenders(empCode);
	}
	public List<Employee> getManagers(int empCode)
	{
		return leaveDAO.getManagers(empCode);
	}
	public List<LeaveTypes> getLeaveTypes()
	{
		return leaveDAO.getLeaveTypes();
	}
	
	public List<LeaveAvailability> getAvailableLeaves(Employee emplDetails) throws ParseException {
		log.info("Entered getAvailableLeaves()...");
		//Date standardDate = emplDetails.getStandardDate();
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(emplDetails);
		List<LeaveAvailability> empDetails = leaveDAO.getAvailableLeaves(emplDetails.getEmpCode(), leaveDurationArray[0], leaveDurationArray[1]);
		return empDetails;
	}
	
	public List<LeaveAvailability> getPreviousAvailableLeaves(Employee emplDetails) throws ParseException{
		String resetStatus = messageSource.getMessage("lts.availabiity.reset.status", null, Locale.getDefault());
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		 // Date standardDate = emplDetails.getStandardDate();
		  Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(emplDetails);
		  Calendar calDate = Calendar.getInstance();
		  calDate.setTime(leaveDurationArray[0]);
		  calDate.add(Calendar.DATE, -1);
		  Date previousLeaveYearTo = sf.parse(sf.format(calDate.getTime()));
		  Calendar dateNow = Calendar.getInstance();
		  Date currentDate = dateNow.getTime();
		  int yearDifference = LTSUtil.getDaysBetweenDates(emplDetails.getStandardDate(), currentDate)/365;
		  if(emplDetails.getResetStatus().equalsIgnoreCase(resetStatus) && yearDifference == 0)
		  {
			  calDate.add(Calendar.MONTH, -(emplDetails.getTrainingPeriod()));
		  }
		  else
		  {
			  calDate.add(Calendar.YEAR, -1);
		  }
		  calDate.add(Calendar.DATE, 1);
		  Date previousLeaveYearFrom = sf.parse(sf.format(calDate.getTime()));
		  List<LeaveAvailability> empPreviousDetails = leaveDAO.getAvailableLeaves(emplDetails.getEmpCode(), previousLeaveYearFrom, previousLeaveYearTo);
		  return empPreviousDetails;
	}
	
	
	public void cancelLeave(int leaveId, Employee emplDetails) throws ParseException {
		float prevYearLeaveDays = 0;
		float currentYearLeaveDays = 0; 
		//SimpleDateFormat sf1 = new SimpleDateFormat("dd-MMM-yyyy");
		//Date standardDate = emplDetails.getStandardDate();
		Date[] currentleaveDuration = LTSUtil.getCurrentLeaveYear(emplDetails);
		Date[] prevLeaveDuration = LTSUtil.getPreviousLeaveYear(currentleaveDuration[0], emplDetails);
		List<EmployeeLeaves> leaveList = leaveRecommendDAO.getDetails(leaveId);
		/*String statusType = leaveRecommendDAO.getStatusType(leaveId);
		String fromAddress = leaveRecommendDAO.getSenderEmail(empCode);
		String toAddressRec = leaveRecommendDAO.getRecEmail(leaveId);
		String userName = leaveRecommendDAO.getSenderName(empCode);
		String senderUserNameRec = leaveRecommendDAO.getRecName(leaveId);
		List<LeaveTypes> typeList = leaveRecommendDAO.getLeaveType(leaveId);
		
		String description = "<b>The following leave has been cancelled.</b><br><br>Employee Name:"+userName+"<br>Leave Type: "+typeList.get(0).getLeaveType()+"<br> From Date: "+sf1.format(leaveList.get(0).getFromDate())+"<br> To Date: "+sf1.format(leaveList.get(0).getToDate())+"<br> No Of Days: "+leaveList.get(0).getNoOfDays()+"";
		String toAddressMgr = leaveRecommendDAO.getMgrDetails(leaveId).get(0).getEmpEmail();
		String senderUserNameMgr = leaveRecommendDAO.getMgrDetails(leaveId).get(0).getEmpName();
		String leaverequestedStatus = messageSource.getMessage("lts.leave.status.request", null, Locale.getDefault());*/
		if(leaveList.get(0).getFromDate().before(currentleaveDuration[0]) && leaveList.get(0).getToDate().before(currentleaveDuration[0]) && leaveList.get(0).getLeaveType() != EARN_LEAVE_CODE)
		{
			leaveDAO.cancelLeave(leaveId, prevLeaveDuration[0], prevLeaveDuration[1]);
		}
		else if(leaveList.get(0).getFromDate().before(currentleaveDuration[0]) && ((leaveList.get(0).getToDate().compareTo(currentleaveDuration[0]) == 1) || (leaveList.get(0).getToDate().compareTo(currentleaveDuration[0]) == 0)) && leaveList.get(0).getLeaveType() != EARN_LEAVE_CODE)
		{
			 prevYearLeaveDays = (LTSUtil.getWorkingDaysBetweenDates(leaveList.get(0).getFromDate(), prevLeaveDuration[1])) + 1;
			 currentYearLeaveDays = Float.valueOf(leaveList.get(0).getNoOfDays()) - prevYearLeaveDays;
			 leaveDAO.cancelCombinedLeave(leaveId, prevLeaveDuration, currentleaveDuration, prevYearLeaveDays, currentYearLeaveDays);
		}
		else
		{
			leaveDAO.cancelLeave(leaveId, currentleaveDuration[0], currentleaveDuration[1]);
		}
		/*if(statusType.equals(leaverequestedStatus))
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec ,senderUserNameRec, description, userName );
		}
		else
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, senderUserNameRec, description, userName);
			boolean isMailSend1 = LTSUtil.sendEmail(messageSource, fromAddress, toAddressMgr, senderUserNameMgr, description, userName);
		}*/
	}

	public List<EmployeeLeaves> getCompOffRequests(int empCode)
	{
		
		return leaveDAO.getCompOffRequests(empCode);
	}

	public void cancelCompOffRequest(int compOffId, Employee emplDetails) throws ParseException
	{
		/*SimpleDateFormat sf1 = new SimpleDateFormat("dd-MMM-yyyy");
		List<LeaveTypes> typeList = leaveRecommendDAO.getLeaveType(compOffId);
		List<EmployeeLeaves> leaveList = leaveRecommendDAO.getDetails(compOffId);*/
		//Date standardDate = emplDetails.getStandardDate();
		Date[] leaveDurationArray = LTSUtil.getCurrentLeaveYear(emplDetails);
		/*String statusType = leaveRecommendDAO.getStatusType(compOffId);
		String fromAddress = leaveRecommendDAO.getSenderEmail(empCode);
		String toAddressRec = leaveRecommendDAO.getRecEmail(compOffId);
		String userName = leaveRecommendDAO.getSenderName(empCode);
		String senderUserNameRec = leaveRecommendDAO.getRecName(compOffId);
		String description = "<b>The following compensatory-off has been cancelled.</b><br>Employee Name:"+userName+"<br>Leave Type: "+typeList.get(0).getLeaveType()+"<br> From Date: "+sf1.format(leaveList.get(0).getFromDate())+"<br> To Date: "+sf1.format(leaveList.get(0).getToDate())+"<br> No Of Days: "+leaveList.get(0).getNoOfDays()+"";
		String toAddressMgr = leaveRecommendDAO.getMgrDetails(compOffId).get(0).getEmpEmail();
		String senderUserNameMgr = leaveRecommendDAO.getMgrDetails(compOffId).get(0).getEmpName();
		String leaverequestedStatus = messageSource.getMessage("lts.compoff.status.request", null, Locale.getDefault());
		if(statusType.equals(leaverequestedStatus))
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, userName, description, senderUserNameRec);
		}
		else
		{
			boolean isMailSend = LTSUtil.sendEmail(messageSource, fromAddress, toAddressRec, senderUserNameRec, description, userName);
			boolean isMailSend1 = LTSUtil.sendEmail(messageSource, fromAddress, toAddressMgr, senderUserNameMgr, description, userName);		
		}*/
		leaveDAO.saveCompOffCancelStatus(compOffId, leaveDurationArray[0], leaveDurationArray[1]);
	}

	public void processCompOffRequest(ApplyLeaveForm applyLeaveForm, int empCode) throws ParseException 
	{
		String fromDate = applyLeaveForm.getFromDate();
		String toDate = applyLeaveForm.getToDate();
		SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
		EmployeeLeaves employeeLeaves = new EmployeeLeaves();
		employeeLeaves.setEmpCode(empCode);
		employeeLeaves.setLeaveType(COMP_OFF_CODE);
		employeeLeaves.setNoOfDays(Float.valueOf(applyLeaveForm.getNoOfDays()));
		employeeLeaves.setFromDate(sf.parse(fromDate));
		employeeLeaves.setToDate(sf.parse(toDate));
		employeeLeaves.setReason(applyLeaveForm.getRemarks());
		employeeLeaves.setContactNumber(applyLeaveForm.getPhNumber());
		employeeLeaves.setRecommender(applyLeaveForm.getRecommender());
		employeeLeaves.setManager(applyLeaveForm.getManager());
		employeeLeaves.setCancelStatus(messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault()));
		employeeLeaves.setLeaveStatus(messageSource.getMessage("lts.compoff.status.request", null, Locale.getDefault()));
		employeeLeaves.setMailStatus(messageSource.getMessage("lts.mail.status.notsent", null, Locale.getDefault()));
		//int leaveId = applyLeaveForm.getLeaveId();
		/*if(leaveId == 0)
		{*/
			leaveDAO.saveCompOffrequest(employeeLeaves);
		/*}
		else
		{
			employeeLeaves.setLeaveId(leaveId);
			leaveDAO.updateCompOffRequest(employeeLeaves);
		}*/
	}

	/*public List<EmployeeLeaves> updateLeaveRequest(int leaveId) 
	{
		List<EmployeeLeaves> leaveList = leaveDAO.getLeaveDetails(leaveId);
		return leaveList;
	}

	public List<EmployeeLeaves> updateCompOffRequest(int leaveId) 
	{
		List<EmployeeLeaves> compOffList = leaveDAO.getLeaveDetails(leaveId);
		return compOffList;
	}*/

	public List<LeaveTypes> getLeaveTypesByGender(int empCode) 
	{
		return leaveDAO.getLeaveTypesByGender(empCode);
	}

	public String getLeaveStatus(int leaveId) 
	{
		return leaveDAO.getLeaveStatus(leaveId);
	}
	
	public String getCancelStatus(int leaveId) 
	{
		return leaveDAO.getCancelStatus(leaveId);
	}

	public String[] getLeaveYears(Employee emplDetails) {
		SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");

		String[] yearArray;
		String resetStatus = messageSource.getMessage("lts.availabiity.reset.status", null, Locale.getDefault());
		Date standardDate = emplDetails.getStandardDate();
		Calendar dateNow = Calendar.getInstance();
		Date currentDate = dateNow.getTime();
		int yearDifference = LTSUtil.getDaysBetweenDates(standardDate, currentDate)/365;
		yearDifference = yearDifference+1;
		if(emplDetails.getResetStatus().equalsIgnoreCase(resetStatus))
		{
			yearArray = new String[yearDifference + 1];
			Calendar fromDate = Calendar.getInstance();
			fromDate.setTime(emplDetails.getJoiningDate());
			String str = sf.format(fromDate.getTime());
			fromDate.add(Calendar.MONTH, emplDetails.getTrainingPeriod());
			fromDate.add(Calendar.DATE, -1);
			str +="---"+ sf.format(fromDate.getTime());
			yearArray[yearDifference] = str;
		}
		else
		{
			yearArray = new String[yearDifference];
		}
		Calendar fromDate = Calendar.getInstance();
		fromDate.setTime(standardDate);
		fromDate.add(Calendar.DATE, -1);
		for(int i=yearDifference-1; i>=0; i--)
		{
			fromDate.add(Calendar.DATE, 1);
			String str = sf.format(fromDate.getTime());
			fromDate.add(Calendar.YEAR, 1);
			fromDate.add(Calendar.DATE, -1);
			str +="---"+ sf.format(fromDate.getTime());
			yearArray[i] = str;
		}
		return yearArray;
	}
	public String[] getPreviousLeaveYears(Employee empDetails) {
		String[] yearArray;
		String resetStatus = messageSource.getMessage("lts.availabiity.reset.status", null, Locale.getDefault());
		SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
		Date standardDate = empDetails.getStandardDate();
		Calendar dateNow = Calendar.getInstance();
		Date currentDate = dateNow.getTime();
		int yearDifference = LTSUtil.getDaysBetweenDates(standardDate, currentDate)/365;
		yearDifference = yearDifference+1;
		if(empDetails.getResetStatus().equalsIgnoreCase(resetStatus))
		{
			yearArray= new String[yearDifference];
			Calendar fromDate = Calendar.getInstance();
			fromDate.setTime(empDetails.getJoiningDate());
			String str = sf.format(fromDate.getTime());
			fromDate.add(Calendar.MONTH, empDetails.getTrainingPeriod());
			fromDate.add(Calendar.DATE, -1);
			str +="---"+ sf.format(fromDate.getTime());
			yearArray[yearDifference-1] = str;
		}
		else
		{
			yearArray= new String[yearDifference-1];
		}
		Calendar fromDate = Calendar.getInstance();
		fromDate.setTime(standardDate);
		fromDate.add(Calendar.DATE, -1);
		for(int i=yearDifference-2; i>=0; i--)
		{
			fromDate.add(Calendar.DATE, 1);
			String str = sf.format(fromDate.getTime());
			fromDate.add(Calendar.YEAR, 1);
			fromDate.add(Calendar.DATE, -1);
			str +="---"+ sf.format(fromDate.getTime());
			yearArray[i] = str;
		}
		return yearArray;
	}

	public List<EmployeeLeaves> processSearchRequest(String leaveYearDuration,int empCode) throws ParseException 
	{
		String[] leaveYearArray = leaveYearDuration.split("---");
		SimpleDateFormat sf1 = new SimpleDateFormat("MM/dd/yyyy");
		SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
		Date leaveYearFrom = sf1.parse(sf1.format(sf.parse(leaveYearArray[0])));
		Date leaveYearTo =  sf1.parse(sf1.format(sf.parse(leaveYearArray[1])));
		return leaveDAO.getSearchResults(leaveYearFrom,leaveYearTo,empCode);
		
	}

	public boolean getSameDatesStatus(int flag, int empCode, Date fromDate, Date toDate) 
	{
		return leaveDAO.getSameDatesStatus(flag, empCode, fromDate, toDate);
	}

	public List<LeaveAvailability> getPreviousAvailability(int empCode, String leaveYear) throws ParseException 
	{
		String[] leaveYearArray = leaveYear.split("---");
		SimpleDateFormat sf1 = new SimpleDateFormat("MM/dd/yyyy");
		SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
		Date leaveYearFrom = sf1.parse(sf1.format(sf.parse(leaveYearArray[0])));
		Date leaveYearTo =  sf1.parse(sf1.format(sf.parse(leaveYearArray[1])));
		return leaveDAO.getPreviousAvailability(empCode, leaveYearFrom, leaveYearTo);
	}

	public void changePassword(int empCode, String password) {
		leaveDAO.changePassword(empCode, password);
	}
}
