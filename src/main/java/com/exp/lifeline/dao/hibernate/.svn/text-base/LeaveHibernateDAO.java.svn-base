package com.experion.lts.dao.hibernate;

import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.springframework.context.MessageSource;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.experion.lts.dao.LeaveDAO;
import com.experion.lts.entity.Employee;
import com.experion.lts.entity.EmployeeLeaves;
import com.experion.lts.entity.LeaveAvailability;
import com.experion.lts.entity.LeaveTypes;
import com.experion.lts.util.LTSUtil;

public class LeaveHibernateDAO extends HibernateDaoSupport implements LeaveDAO
{
	public static final int COMP_OFF_LEAVE_CODE = 8;
	public static final int COMP_OFF_CODE = 9;
	public static final int EDUCTN_LEAVE_CODE = 5;
	private static final int LOP_CODE = 10;
	public static final int LEAVE_FLAG = 1;
	public static final int COMPOFF_FLAG = 2;
	private static final int EARN_LEAVE_CODE = 3;
	private static final float MAX_EARN_LEAVE = 15;
	private static final float EARN_LEAVE_COUNT = 4;
	private MessageSource messageSource;
	
	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}
	

	@SuppressWarnings("unchecked")
	public List<EmployeeLeaves> getAppliedLeaves(int empCode)
	{
		try
		{ 
			List<EmployeeLeaves> empDetails=getHibernateTemplate().find("from EmployeeLeaves where empCode=? and leaveType != ? order by leaveId desc", empCode, COMP_OFF_CODE);
		    return empDetails;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public Float getLeaveAvailabilty(int empCode, int leaveType, Date leaveYearFrom, Date leaveYearTo)
	{
		try
		{
			/*String recommendedLeaveStatus = messageSource.getMessage("lts.rec.status.recommend", null, Locale.getDefault());
			String requstedLeaveStatus = messageSource.getMessage("lts.leave.status.request", null, Locale.getDefault());*/
			List<Float> availability = getHibernateTemplate().find("select availability from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",empCode, leaveType, leaveYearFrom, leaveYearTo);
			/*List<?> requstedNoOfDays = getHibernateTemplate().find("select sum(noOfDays) from EmployeeLeaves where empCode = ? and (leaveType = ? and (leaveStatus = ? or leaveStatus = ?))", empCode, leaveType, recommendedLeaveStatus, requstedLeaveStatus);
			if(requstedNoOfDays.get(0) == null)
			{
				return availability.get(0);
			}
			else
			{
				Float availableLeave = availability.get(0);
				float requestedLeave = Float.valueOf(requstedNoOfDays.get(0).toString());*/
			if(!availability.isEmpty())
			{
				return availability.get(0);

			}
			else
			{
				return (float) 0;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	@SuppressWarnings("unchecked")
	public void saveLeaveRequest(EmployeeLeaves employeeLeaves, Employee empDetails, Date[] leaveDuration)
	{
		try
		{
			//SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
			getHibernateTemplate().save(employeeLeaves);
			Date[] currentLeaveDuration = LTSUtil.getCurrentLeaveYear(empDetails);
			Date[] prevLeaveDuration = LTSUtil.getPreviousLeaveYear(currentLeaveDuration[0], empDetails);
			Date[] nextLeaveDuration = LTSUtil.getNextLeaveYear(currentLeaveDuration[1]);
			/*Calendar calDate = Calendar.getInstance();
			calDate.setTime(currentLeaveDuration[1]);
			calDate.add(Calendar.MONTH, -1);
			Date checkDate = sf.parse(sf.format(calDate.getTime()));*/
			if(employeeLeaves.getLeaveType() == EARN_LEAVE_CODE && employeeLeaves.getFromDate().before(currentLeaveDuration[0]) && employeeLeaves.getToDate().before(currentLeaveDuration[0]))
			{
				List<LeaveAvailability> prevEarnLeaveBalance = getHibernateTemplate().find("from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", empDetails.getEmpCode(), employeeLeaves.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empDetails.getEmpCode(), employeeLeaves.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				if((prevEarnLeaveBalance.get(0).getAvailability() + EARN_LEAVE_COUNT) > MAX_EARN_LEAVE)
				{
					float earnAvailability = prevEarnLeaveBalance.get(0).getAvailability() + EARN_LEAVE_COUNT - employeeLeaves.getNoOfDays();
					if(!(earnAvailability > MAX_EARN_LEAVE))
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", earnAvailability, earnAvailability, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					}
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), eligibleLeaves = (eligibleLeaves - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empDetails.getEmpCode(), employeeLeaves.getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
				}
			}
			else if(employeeLeaves.getLeaveType() == EARN_LEAVE_CODE && employeeLeaves.getFromDate().after(currentLeaveDuration[1]) || employeeLeaves.getToDate().after(currentLeaveDuration[1]))
			{
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empDetails.getEmpCode(), employeeLeaves.getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
				//getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), eligibleLeaves = (eligibleLeaves - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empDetails.getEmpCode(), employeeLeaves.getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
			}
			else
			{
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empDetails.getEmpCode(), employeeLeaves.getLeaveType(), leaveDuration[0], leaveDuration[1]);
			}
			/*if(employeeLeaves.getLeaveType() == EARN_LEAVE_CODE && (employeeLeaves.getFromDate().after(leaveYearTo) || employeeLeaves.getToDate().after(leaveYearTo)))
			{
				Date[] nextLeaveYear = LTSUtil.getNextLeaveYear(leaveYearTo);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), eligibleLeaves = (eligibleLeaves - ?)  where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empCode, employeeLeaves.getLeaveType(), nextLeaveYear[0], nextLeaveYear[1]);
			}
			getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",employeeLeaves.getNoOfDays(), employeeLeaves.getNoOfDays(), empCode, employeeLeaves.getLeaveType(), leaveYearFrom, leaveYearTo);
			getHibernateTemplate().save(employeeLeaves);*/
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	/*@SuppressWarnings("unchecked")
	public void updateLeaveRequest(EmployeeLeaves employeeLeaves,int empCode) 
	{
		try
		{
			List<Float> noOfDays = getHibernateTemplate().find("select noOfDays from EmployeeLeaves where leaveId = ?", employeeLeaves.getLeaveId());
			getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = ((availability + ?) - ?) where empCode = ? and typeId = ?",noOfDays.get(0), employeeLeaves.getNoOfDays(),empCode,employeeLeaves.getLeaveType());
			getHibernateTemplate().update(employeeLeaves);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}*/
	
	@SuppressWarnings("unchecked")
	public List<Employee> getRecommenders(int empCode)
	{
		try
		{
			String recRole =  (messageSource.getMessage("lts.role.recommender", null, Locale.getDefault())).toLowerCase();
			String mgrRole =  (messageSource.getMessage("lts.role.manager", null, Locale.getDefault())).toLowerCase();
			String employeeRole =  (messageSource.getMessage("lts.role.employee", null, Locale.getDefault())).toLowerCase();
			String adminRole =  (messageSource.getMessage("lts.role.admin", null, Locale.getDefault())).toLowerCase();
			List<Employee> empRole = getHibernateTemplate().find("from Employee where empCode = ?", empCode);
			List<Employee> recList = null;
			if(empRole.get(0).getEmpRole().equalsIgnoreCase(employeeRole) || empRole.get(0).getEmpRole().equalsIgnoreCase(recRole) || empRole.get(0).getEmpRole().equalsIgnoreCase(adminRole))
			{
				recList = getHibernateTemplate().find("from Employee where lower(empRole) = ?", recRole);
			}
			else
			{
				recList = getHibernateTemplate().find("from Employee where lower(empRole) = ?", mgrRole);

			}
			return recList;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	@SuppressWarnings("unchecked")
	public List<Employee> getManagers(int empCode)
	{
		try
		{
			String recRole =  (messageSource.getMessage("lts.role.recommender", null, Locale.getDefault())).toLowerCase();
			String mgrRole =  (messageSource.getMessage("lts.role.manager", null, Locale.getDefault())).toLowerCase();
			String adminRole =  (messageSource.getMessage("lts.role.admin", null, Locale.getDefault())).toLowerCase();
			String employeeRole =  (messageSource.getMessage("lts.role.employee", null, Locale.getDefault())).toLowerCase();
			List<Employee> empRole = getHibernateTemplate().find("from Employee where empCode = ?", empCode);
			List<Employee> mgrList = null;
			if(empRole.get(0).getEmpRole().equalsIgnoreCase(employeeRole) || empRole.get(0).getEmpRole().equalsIgnoreCase(recRole) || empRole.get(0).getEmpRole().equalsIgnoreCase(adminRole))
			{
				mgrList = getHibernateTemplate().find("from Employee where lower(empRole) = ?", mgrRole);
			}
			else
			{
				mgrList = getHibernateTemplate().find("from Employee where lower(empRole) = ?",mgrRole);
			}
			return mgrList;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public List<LeaveTypes> getLeaveTypesByGender(int empCode) 
	{
		try
		{
			List<LeaveTypes> leaveTypes;
			String maternityLeave = messageSource.getMessage("lts.leavetype.maternityleave", null, Locale.getDefault()).toLowerCase();
			String paternityLeave = messageSource.getMessage("lts.leavetype.paternityleave", null, Locale.getDefault()).toLowerCase();
			String male = messageSource.getMessage("lts.gender.male", null, Locale.getDefault()).toLowerCase();
			String compOff =  messageSource.getMessage("lts.leavetype.compoffleave", null, Locale.getDefault()).toLowerCase();
			List<String> gender = getHibernateTemplate().find("select empGender from Employee where empCode = ?", empCode);
			if(male.equals(gender.get(0).toLowerCase()))
			{
				leaveTypes = getHibernateTemplate().find("from LeaveTypes where lower(leaveType) != ? and lower(leaveType) != ? order by leaveTypeId", maternityLeave, compOff);
			}
			else 
			{
				leaveTypes = getHibernateTemplate().find("from LeaveTypes where lower(leaveType) != ? and lower(leaveType) != ? order by leaveTypeId", paternityLeave, compOff);
			}
			return leaveTypes;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	public List<LeaveTypes> getLeaveTypes()
	{
		try
		{
			@SuppressWarnings("unchecked")
			List<LeaveTypes> leaveTypes = getHibernateTemplate().find("from LeaveTypes");
			return leaveTypes;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public List<LeaveAvailability> getAvailableLeaves(int empCode, Date leaveYearFrom, Date leaveYearTo)
	{
		try
		{
			List<LeaveAvailability> availableLeaveDetails = getHibernateTemplate().find("from LeaveAvailability where empCode=? and leaveYearFrom = ? and leaveYearTo = ? order by typeId",empCode, leaveYearFrom, leaveYearTo);
			return availableLeaveDetails;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void cancelLeave(int leaveId, Date leaveYearFrom, Date leaveYearTo)
	{
		try
		{
			//SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
			List<EmployeeLeaves> leaveDetails = getHibernateTemplate().find("from EmployeeLeaves where leaveId = ?",leaveId);
			Employee empDetails = (Employee)getHibernateTemplate().find("from Employee where empCode = ?", leaveDetails.get(0).getEmpCode()).get(0);
			String recRejectStatus = messageSource.getMessage("lts.rec.status.reject",null,Locale.getDefault());
			String mgrRejectStatus = messageSource.getMessage("lts.mgr.status.reject",null,Locale.getDefault());
			String cancelStatus = messageSource.getMessage("lts.leave.status.cancel", null, Locale.getDefault());
			Date[] currentLeaveDuration = LTSUtil.getCurrentLeaveYear(empDetails);
			Date[] prevLeaveDuration = LTSUtil.getPreviousLeaveYear(currentLeaveDuration[0], empDetails);
			Date[] nextLeaveDuration = LTSUtil.getNextLeaveYear(currentLeaveDuration[1]);
		/*	Calendar calDate = Calendar.getInstance();
			calDate.setTime(currentLeaveDuration[1]);
			calDate.add(Calendar.MONTH, -1);
			Date checkDate = sf.parse(sf.format(calDate.getTime()));*/
			if(leaveDetails.get(0).getLeaveType() == LOP_CODE || leaveDetails.get(0).getLeaveStatus().equalsIgnoreCase(recRejectStatus) || leaveDetails.get(0).getLeaveStatus().equalsIgnoreCase(mgrRejectStatus))
			{
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}
			else 
			{
				if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && leaveDetails.get(0).getFromDate().before(currentLeaveDuration[0]) && leaveDetails.get(0).getToDate().before(currentLeaveDuration[0]))
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",leaveDetails.get(0).getNoOfDays(), leaveDetails.get(0).getNoOfDays(), empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
					List<LeaveAvailability> currentEarnLeaveEligibility = getHibernateTemplate().find("from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					float newEligibility = currentEarnLeaveEligibility.get(0).getEligibleLeaves() + leaveDetails.get(0).getNoOfDays();
					if(newEligibility > MAX_EARN_LEAVE)
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",MAX_EARN_LEAVE, MAX_EARN_LEAVE, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					}
					else
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",newEligibility, newEligibility, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					}
				}
				else if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && leaveDetails.get(0).getFromDate().after(currentLeaveDuration[1]) || leaveDetails.get(0).getToDate().after(currentLeaveDuration[1]))
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",leaveDetails.get(0).getNoOfDays(), leaveDetails.get(0).getNoOfDays(), empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
					//getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), eligibleLeaves = (eligibleLeaves + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",leaveDetails.get(0).getNoOfDays(), leaveDetails.get(0).getNoOfDays(), empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", leaveDetails.get(0).getNoOfDays(), leaveDetails.get(0).getNoOfDays(), leaveDetails.get(0).getEmpCode(), leaveDetails.get(0).getLeaveType() , leaveYearFrom, leaveYearTo);
				}
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}
			/*else if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && (leaveDetails.get(0).getFromDate().after(leaveYearTo) || leaveDetails.get(0).getToDate().after(leaveYearTo)))
			{
				Date[] nextLeaveYear = LTSUtil.getNextLeaveYear(leaveYearTo);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), eligibleLeaves = (eligibleLeaves + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", requestedDays, requestedDays, empId, typeId, nextLeaveYear[0], nextLeaveYear[1]);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", requestedDays, requestedDays, empId, typeId, leaveYearFrom, leaveYearTo);
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}
			else
			{
				List<LeaveAvailability> earnLeaveCount = getHibernateTemplate().find("from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", empId, EARN_LEAVE_CODE, leaveYearFrom, leaveYearTo);
				if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && (earnLeaveCount.get(0).getAvailability() + requestedDays) > MAX_EARN_LEAVE)
				{
					
					SimpleDateFormat sf = new SimpleDateFormat("MM/dd/yyyy");
					Calendar calDate = Calendar.getInstance();
					calDate.setTime(leaveYearFrom);
					calDate.add(Calendar.DATE, -1);
					Date prevLeaveYearTo = sf.parse(sf.format(calDate.getTime()));
					calDate.add(Calendar.YEAR, -1);
					calDate.add(Calendar.DATE, 1);
					Date prevLeaveYearFrom = sf.parse(sf.format(calDate.getTime()));
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", MAX_EARN_LEAVE, empId, typeId, leaveYearFrom, leaveYearTo);
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", requestedDays, empId, typeId, prevLeaveYearFrom, prevLeaveYearTo);
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", requestedDays, requestedDays, empId, typeId, leaveYearFrom, leaveYearTo);
				}
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}*/
		}
		catch(Exception e)
		{
			e.printStackTrace();
			
		}
	}

	@SuppressWarnings("unchecked")
	public List<EmployeeLeaves> getCompOffRequests(int empCode)
	{
		int compOffLeaveCode = 9;
		try
		{
			return getHibernateTemplate().find("from EmployeeLeaves where empCode = ? and leaveType = ? and leaveStatus like '%Comp-Off%' order by leaveId desc", empCode, compOffLeaveCode);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public Date getToDate(int leaveId)
	{
		try
		{
			List<Date> toDate =  getHibernateTemplate().find("select toDate from EmployeeLeaves where leaveId = ?", leaveId);
			return toDate.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public void saveCompOffCancelStatus(int compOffId, Date leaveYearFrom, Date leaveYearTo) 
	{
		try
		{
			List<EmployeeLeaves> compOffStatusList = getHibernateTemplate().find("from EmployeeLeaves where leaveId = ?", compOffId);
			String compOffStatus = compOffStatusList.get(0).getLeaveStatus();
			int empCode = compOffStatusList.get(0).getEmpCode();
			/*int typeId = compOffStatusList.get(0).getLeaveType();*/
			Float requestedDays = compOffStatusList.get(0).getNoOfDays();
			String compOffApproveStatus = messageSource.getMessage("lts.mgr.status.approve.compoff", null, Locale.getDefault());
			if(compOffStatus.equals(compOffApproveStatus))
			{
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), eligibleLeaves = (eligibleLeaves - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", requestedDays, requestedDays, empCode, COMP_OFF_LEAVE_CODE, leaveYearFrom, leaveYearTo);
				compOffStatus = messageSource.getMessage("lts.compoff.status.cancel", null, Locale.getDefault());
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", compOffStatus,compOffId);
			}
			else
			{
				compOffStatus = messageSource.getMessage("lts.compoff.status.cancel", null, Locale.getDefault());
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set cancelStatus = ? where leaveId = ?", compOffStatus, compOffId);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	public void saveCompOffrequest(EmployeeLeaves employeeLeaves)
	{
		try
		{
			getHibernateTemplate().save(employeeLeaves);

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}

	@SuppressWarnings("unchecked")
	public String getLeaveStatus(int leaveId) 
	{
		try
		{
			List<String> statusString = getHibernateTemplate().find("select leaveStatus from EmployeeLeaves where leaveId = ?", leaveId);
			return statusString.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
	@SuppressWarnings("unchecked")
	public String getCancelStatus(int leaveId) 
	{
		try
		{
			List<String> statusString = getHibernateTemplate().find("select cancelStatus from EmployeeLeaves where leaveId = ?", leaveId);
			return statusString.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public Date getJoiningDate(int empCode) {
		try
		{
			@SuppressWarnings("unchecked")
			List<Date> joiningDate = getHibernateTemplate().find("select joiningDate from Employee where empCode = ?", empCode);
			return joiningDate.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<EmployeeLeaves> getSearchResults(Date leaveYearFrom, Date leaveYearTo,int empCode) 
	{
		try
		{
			List<EmployeeLeaves> leaveDetails = getHibernateTemplate().find("from EmployeeLeaves where fromDate >= ? and fromDate <= ? and empCode=? and leaveType != ? order by leaveId desc ", leaveYearFrom, leaveYearTo,empCode, COMP_OFF_CODE);
			return leaveDetails;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public boolean getSameDatesStatus(int flag, int empCode, Date fromDate, Date toDate)
	{
		try
		{
			List<Long> count = null;
			String cancelStatus = messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault());
			String recLeaveRejectStatus = messageSource.getMessage("lts.rec.status.reject", null, Locale.getDefault());
			String mgrLeaveRejectStatus = messageSource.getMessage("lts.mgr.status.reject", null, Locale.getDefault());
			String recCompOffRejectStatus = messageSource.getMessage("lts.rec.status.reject.compoff", null, Locale.getDefault());
			String mgrCompOffRejectStatus = messageSource.getMessage("lts.mgr.status.reject.compoff", null, Locale.getDefault());
			if(flag == LEAVE_FLAG)
			{
				count = getHibernateTemplate().find("select count(leaveId) from EmployeeLeaves where empCode = ? and ((fromDate <=? and toDate >= ?) or (fromDate <= ? and toDate >= ?) or (fromDate >= ? and toDate <= ?)) and cancelStatus = ? and leaveType != ? and leaveStatus != ? and leaveStatus != ?", empCode, fromDate, fromDate, toDate, toDate, fromDate, toDate, cancelStatus, COMP_OFF_CODE, recLeaveRejectStatus, mgrLeaveRejectStatus);
			}
			else
			{
				count = getHibernateTemplate().find("select count(leaveId) from EmployeeLeaves where empCode = ? and ((fromDate <=? and toDate >= ?) or (fromDate <= ? and toDate >= ?) or (fromDate >= ? and toDate <= ?)) and cancelStatus = ? and leaveType = ? and leaveStatus != ? and leaveStatus != ?", empCode, fromDate, fromDate, toDate, toDate, fromDate, toDate, cancelStatus, COMP_OFF_CODE, recCompOffRejectStatus, mgrCompOffRejectStatus);
			}
			if(count.get(0) != 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}

	@SuppressWarnings("unchecked")
	public void saveRequest(EmployeeLeaves employeeLeaves, Employee empDetails, Date[] currentLeaveDuration, Date[] previousLeaveDuration, float prevYearLeaveDays, float currentYearLeaveDays) 
	{
		try
		{
			getHibernateTemplate().save(employeeLeaves);
			Date[] curLeaveDuration = LTSUtil.getCurrentLeaveYear(empDetails);
			Date[] prevLeaveDuration = LTSUtil.getPreviousLeaveYear(currentLeaveDuration[0], empDetails);
			Date[] nextLeaveDuration = LTSUtil.getNextLeaveYear(currentLeaveDuration[1]);
			if(employeeLeaves.getLeaveType() == EARN_LEAVE_CODE && employeeLeaves.getFromDate().before(curLeaveDuration[0]) && ((employeeLeaves.getToDate().compareTo(curLeaveDuration[0]) == 1) ||(employeeLeaves.getToDate().compareTo(curLeaveDuration[0]) == 0)))
			{
				List<LeaveAvailability> prevEarnLeaveBalance = getHibernateTemplate().find("from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", empDetails.getEmpCode(), employeeLeaves.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", prevYearLeaveDays, prevYearLeaveDays, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), prevLeaveDuration[0], prevLeaveDuration[1]);
				if((prevEarnLeaveBalance.get(0).getAvailability() + EARN_LEAVE_COUNT) > MAX_EARN_LEAVE)
				{
					float earnAvailability = prevEarnLeaveBalance.get(0).getAvailability() + EARN_LEAVE_COUNT - prevYearLeaveDays;
					if(!(earnAvailability > MAX_EARN_LEAVE))
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", earnAvailability, earnAvailability, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), curLeaveDuration[0], curLeaveDuration[1]);
					}
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), eligibleLeaves = (eligibleLeaves - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",prevYearLeaveDays, prevYearLeaveDays, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), curLeaveDuration[0], curLeaveDuration[1]);
				}
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",currentYearLeaveDays, currentYearLeaveDays,empDetails.getEmpCode(),employeeLeaves.getLeaveType(), curLeaveDuration[0], curLeaveDuration[1]);
			}
			else if(employeeLeaves.getLeaveType() == EARN_LEAVE_CODE && (employeeLeaves.getFromDate().compareTo(curLeaveDuration[1]) == -1 || employeeLeaves.getFromDate().compareTo(curLeaveDuration[1]) == 0) && employeeLeaves.getToDate().after(curLeaveDuration[1]))
			{
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",currentYearLeaveDays, currentYearLeaveDays, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",prevYearLeaveDays, prevYearLeaveDays, empDetails.getEmpCode(), employeeLeaves.getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
			}
			else
			{
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",currentYearLeaveDays, currentYearLeaveDays,empDetails.getEmpCode(),employeeLeaves.getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
				getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",prevYearLeaveDays, prevYearLeaveDays,empDetails.getEmpCode(),employeeLeaves.getLeaveType(), previousLeaveDuration[0], previousLeaveDuration[1]);
			}
			/*getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",currentYearLeaveDays, currentYearLeaveDays,empCode,employeeLeaves.getLeaveType(), leaveYearFrom, leaveYearTo);
			getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability - ?), leavesTaken = (leavesTaken + ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",prevYearLeaveDays, prevYearLeaveDays,empCode,employeeLeaves.getLeaveType(), previousLeaveYearFrom, previousLeaveYearTo);
			getHibernateTemplate().save(employeeLeaves);*/
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}

	@SuppressWarnings("unchecked")
	public void cancelCombinedLeave(int leaveId, Date[] prevLeaveDuration, Date[] currentLeaveDuration, float prevYearLeaveDays, float currentYearLeaveDays)
	{
		try
		{
			
			List<EmployeeLeaves> leaveDetails = getHibernateTemplate().find("from EmployeeLeaves where leaveId = ?",leaveId);
			Employee empDetails = (Employee)getHibernateTemplate().find("from Employee where empCode = ?", leaveDetails.get(0).getEmpCode()).get(0);
			String leaveStatus = leaveDetails.get(0).getLeaveStatus();
			int empId = leaveDetails.get(0).getEmpCode();
			int typeId = leaveDetails.get(0).getLeaveType();
			String recRejectStatus = messageSource.getMessage("lts.rec.status.reject",null,Locale.getDefault());
			String mgrRejectStatus = messageSource.getMessage("lts.mgr.status.reject",null,Locale.getDefault());
			String cancelStatus = messageSource.getMessage("lts.leave.status.cancel", null, Locale.getDefault());
			Date[] curLeaveDuration = LTSUtil.getCurrentLeaveYear(empDetails);
			Date[] previousLeaveDuration = LTSUtil.getPreviousLeaveYear(curLeaveDuration[0], empDetails);
			Date[] nextLeaveDuration = LTSUtil.getNextLeaveYear(curLeaveDuration[1]);
			if(typeId == LOP_CODE || leaveStatus.equals(recRejectStatus) || leaveStatus.equals(mgrRejectStatus))
			{
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}
			else
			{
				if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && leaveDetails.get(0).getFromDate().before(curLeaveDuration[0]) && ((leaveDetails.get(0).getToDate().compareTo(curLeaveDuration[0]) == 1) ||(leaveDetails.get(0).getToDate().compareTo(curLeaveDuration[0]) == 0)))
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", prevYearLeaveDays, prevYearLeaveDays, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), previousLeaveDuration[0], previousLeaveDuration[1]);
					List<LeaveAvailability> currentEarnLeaveEligibility = getHibernateTemplate().find("from LeaveAvailability where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					float newEligibility = currentEarnLeaveEligibility.get(0).getEligibleLeaves() + prevYearLeaveDays;
					if(newEligibility > MAX_EARN_LEAVE)
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",MAX_EARN_LEAVE, MAX_EARN_LEAVE, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					}
					else
					{
						getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (? - leavesTaken), eligibleLeaves = ? where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",newEligibility, newEligibility, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					}
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", currentYearLeaveDays, currentYearLeaveDays,empDetails.getEmpCode(),leaveDetails.get(0).getLeaveType(), curLeaveDuration[0], curLeaveDuration[1]);
				}
				else if(leaveDetails.get(0).getLeaveType() == EARN_LEAVE_CODE && (leaveDetails.get(0).getFromDate().compareTo(curLeaveDuration[1]) == -1 || leaveDetails.get(0).getFromDate().compareTo(curLeaveDuration[1]) == 0) && leaveDetails.get(0).getToDate().after(curLeaveDuration[1]))
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",currentYearLeaveDays, currentYearLeaveDays, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), currentLeaveDuration[0], currentLeaveDuration[1]);
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?",prevYearLeaveDays, prevYearLeaveDays, empDetails.getEmpCode(), leaveDetails.get(0).getLeaveType(), nextLeaveDuration[0], nextLeaveDuration[1]);
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", prevYearLeaveDays, prevYearLeaveDays, empId, typeId, prevLeaveDuration[0], prevLeaveDuration[1]);
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", currentYearLeaveDays, currentYearLeaveDays, empId, typeId, currentLeaveDuration[0], currentLeaveDuration[1]);
				}
				getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
			}
			/*else
			{
				if(leaveStatus.equals(recRejectStatus) || leaveStatus.equals(mgrRejectStatus))
				{
					getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
				}
				else
				{
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", prevYearLeaveDays, prevYearLeaveDays, empId, typeId, prevLeaveDuration[0], prevLeaveDuration[1]);
					getHibernateTemplate().bulkUpdate("update LeaveAvailability set availability = (availability + ?), leavesTaken = (leavesTaken - ?) where empCode = ? and typeId = ? and leaveYearFrom = ? and leaveYearTo = ?", currentYearLeaveDays, currentYearLeaveDays, empId, typeId, currentleaveDuration[0], currentleaveDuration[1]);
					getHibernateTemplate().bulkUpdate("update EmployeeLeaves set  cancelStatus = ? where leaveId = ?", cancelStatus,leaveId);
				}
			}*/
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	public List<LeaveAvailability> getPreviousAvailability(int empCode, Date leaveYearFrom, Date leaveYearTo) 
	{
		try
		{
			return getHibernateTemplate().find("from LeaveAvailability where empCode = ? and leaveYearFrom = ? and leaveYearTo = ?", empCode, leaveYearFrom, leaveYearTo);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	public void saveLOPRequest(EmployeeLeaves employeeLeaves) 
	{
		try
		{
			getHibernateTemplate().save(employeeLeaves);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	public void changePassword(int empCode, String password) {
		
		try
		{
			getHibernateTemplate().bulkUpdate("update Employee set empPassword = ? where empCode = ?",password, empCode);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	public long getEducationLeaveCount(Employee empDetails, Date leaveYearFrom, Date leaveYearTo) 
	{
		try
		{
			String cancelStatus = messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault());
			String recLeaveRejectStatus = messageSource.getMessage("lts.rec.status.reject", null, Locale.getDefault());
			String mgrLeaveRejectStatus = messageSource.getMessage("lts.mgr.status.reject", null, Locale.getDefault());
			List<Long> eduLeaveCount = getHibernateTemplate().find("select count(leaveId) from EmployeeLeaves where empCode = ? and leaveType = ? and ((fromDate >= ? and fromDate <= ?) or (toDate >= ? and toDate <= ?)) and leaveStatus != ? and leaveStatus != ? and cancelStatus = ?)", empDetails.getEmpCode(), EDUCTN_LEAVE_CODE, leaveYearFrom, leaveYearTo, leaveYearFrom, leaveYearTo, recLeaveRejectStatus, mgrLeaveRejectStatus, cancelStatus);
			return eduLeaveCount.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return 0;
		}
	}

	@SuppressWarnings("unchecked")
	public List<EmployeeLeaves> getEducationLeaveDetails(Employee empDetails)
	{
		try
		{
			String cancelStatus = messageSource.getMessage("lts.compoff.status.notcancelled", null, Locale.getDefault());
			String recLeaveRejectStatus = messageSource.getMessage("lts.rec.status.reject", null, Locale.getDefault());
			String mgrLeaveRejectStatus = messageSource.getMessage("lts.mgr.status.reject", null, Locale.getDefault());
			List<EmployeeLeaves> eduLeaveCount = getHibernateTemplate().find("from EmployeeLeaves where empCode = ? and leaveType = ? and leaveStatus != ? and leaveStatus != ? and cancelStatus = ?)", empDetails.getEmpCode(), EDUCTN_LEAVE_CODE, recLeaveRejectStatus, mgrLeaveRejectStatus, cancelStatus);
			return eduLeaveCount;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<EmployeeLeaves> getCompOffDetails(int compOffId) {
		try
		{
			return getHibernateTemplate().find("from EmployeeLeaves where leaveId = ?", compOffId);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}
}
